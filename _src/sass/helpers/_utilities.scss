//=================================
// UTILITIES
//=================================

// Font-smoothing for OSX
@mixin font-smoothing {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.004);
}

// Remove font-smoothing if not necessary
@mixin no-font-smoothing {
	-webkit-font-smoothing: subpixel-antialiased;
	-moz-osx-font-smoothing: auto;
	text-shadow: none;
}

// Absolute center content
%abs-center {
	display: block;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// Absolute Center Vertically (ie9+)
// Parent container will need to have a height for it to work.
%abs-center-vertical {
	display: block;
	top: 50%;
	transform: translateY(-50%);
}

// Absolute Center Horizontally (ie9+)
// Parent container will need to have a height for it to work.
%abs-center-horizontal {
	display: block;
	left: 50%;
	transform: translateX(-50%);
}

// Visually hide elements while at the same time make them accessible on screen readers
%visually-hidden {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}

// Ellipsis
%ellipsis {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

// Remove all list styling
// ex: @extend %naked-list
%naked-list {
	list-style: none;
	padding: 0;
	margin: 0;
}

// Remove all button styling and reset it to default
// ex: @extend %naked-button
%naked-button {
	background: transparent;
	outline: none;
	border: 0;
	padding: 0;
	margin: 0;
	font-size: 1em;
	cursor: pointer;
}


//---------------------------------
// Layout
//---------------------------------

// max-width container with multiple options, see variables for options
// ex: @include row(medium)
@mixin row($width: false) {
	@if $width == small {
		max-width: $max-width-small;
	}
	@if $width == medium {
		max-width: $max-width-medium;
	}
	@if $width == large {
		max-width: $max-width-large;
	}
	width: 100%;
	margin: 0 auto;
}

// gutter between columns, see variables for options
// ex: @include gutter or @include gutter(large)
@mixin gutter($size: false) {
	@if $size == large {
		padding-left: $gutter;
		padding-right: $gutter;
		@include mq(medium) {
			padding-left: $gutter-large;
			padding-right: $gutter-large;
		}
	} @else {
		padding-left: $gutter;
		padding-right: $gutter;
	}
}


//---------------------------------
// Cross Browser
//---------------------------------

// Cross-browser alpha transparency for old IE
@mixin rgba($color, $alpha) {
	$rgba: rgba($color, $alpha);
	$ie-hex-str: ie-hex-str($rgba);
	background-color: transparent;
	background-color: $rgba;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
	zoom: 1;
}

// Cross-browser opacity for old IE
@mixin opacity($alpha) {
	opacity: $alpha;
	-ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=$alpha*100)";
	filter: alpha(opacity=$alpha*100);
}

// Cross-browser background-cover for old IE
// ex: @extend %bg-cover
// https://raw.githubusercontent.com/louisremi/background-size-polyfill/gh-pages/backgroundsize.min.htc
%bg-cover {
	background-repeat: no-repeat;
	background-size: cover;
	-ms-behavior: url('assets/images/backgroundsize.min.htc');
	background-position: center center;
}


//---------------------------------
// Class Helpers
//---------------------------------

// Clear class helpers
.cf,
.clear,
.clearfix {
	@extend %cf;
}

// Visually hide elements while at the same time make them accessible on screen readers
.visually-hidden {
	@extend %visually-hidden;
}